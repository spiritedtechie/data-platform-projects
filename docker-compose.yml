services:
  jupyter:
    build: 
      dockerfile: ./Dockerfile.jupyter
    ports:
      - 8888:8888
    volumes:
      - ./jupyter:/home/jovyan/work
    networks:
      - network
    environment:
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=eu-west-1
    command:
      - "start-notebook.sh"
      - "--NotebookApp.token=''"
      
  postgres:
    image: postgres:15
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ./pg-init-scripts:/docker-entrypoint-initdb.d
      - postgres-volume:/var/lib/postgresql/data
    networks:
      - network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    command:
      - "postgres"
      - "-c"
      # Set to allow WAL based CDC
      - "wal_level=logical"

  metabase:
    image: metabase/metabase:latest
    expose:
      - "3001"
    ports:
      - "3000:3000"
    networks:
      - network
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: metabase_user
      MB_DB_PASS: metabase
      MB_DB_HOST: postgres
    depends_on:
      - postgres

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    restart: always
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    networks:
      - network
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes

  kafka:
    image: docker.io/bitnami/kafka:3.4
    restart: always
    ports:
      - "9093:9093"
    networks:
      - network
    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    networks:
      - network
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: "Data Platform Kafka Cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      # Point to Debezium Connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: Debezium Connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://debezium-connect:8083
    depends_on:
      - kafka
      - debezium-connect

  debezium-connect:
    build: 
      dockerfile: ./Dockerfile.debezium-connect
    restart: always
    ports:
      - 8083:8083
    networks:
      - network
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=dbz_connect_configs
      - OFFSET_STORAGE_TOPIC=dbz_connect_offsets
      - STATUS_STORAGE_TOPIC=dbz_connect_statuses
    depends_on:
      - kafka
      - postgres
      - minio
      - iceberg-catalog

  debezium-ui:
    image: debezium/debezium-ui:2.4
    # No Arm image for Macs yet 
    platform: linux/x86_64
    ports:
      - "8081:8080"
    networks:
      - network
    environment:
      - KAFKA_CONNECT_URIS=http://debezium-connect:8083
    depends_on:
      - debezium-connect

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - "./minio-data:/data"
    networks:
      - network
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
      MINIO_DOMAIN: minio
    command: server --console-address ":9001" /data
  
  minio-create-buckets:
    image: minio/mc
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minio minio123;
      /usr/bin/mc mb myminio/warehouse;
      exit 0;
      "
    networks:
      - network
    depends_on:
      - minio

  iceberg-catalog:
    image: tabulario/iceberg-rest:0.6.0
    ports:
      - 8181:8181
    environment:
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_CATALOG__IMPL=org.apache.iceberg.jdbc.JdbcCatalog
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_PATH__STYLE__ACCESS=true
      - CATALOG_URI=jdbc:postgresql://postgres:5432/iceberg_catalog
      - CATALOG_JDBC_USER=iceberg_user
      - CATALOG_JDBC_PASSWORD=iceberg
      - CATALOG_S3_ENDPOINT=http://minio:9000
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - AWS_REGION=eu-west-1
    networks:
      - network
    depends_on:
      - postgres

volumes:
  postgres-volume:
  kafka-volume:
  zookeeper-volume:

networks:
  network:
